---
import Layout from '../../layouts/Layout.astro';
// Needed for client-side logic
import { apiClient } from '../../lib/apiClient'; 

// Types (align with backend models)
interface ChartListItem {
  id: string;
  name: string;
  // Add other fields if needed for display
}
interface SynastryResult {
  chart1_name: string;
  chart2_name: string;
  aspects: { planet1: string; planet2: string; aspect_name: string; orb: number }[];
  calculation_error?: string | null;
}

// Server-side data (will be empty as fetch is client-side)
let charts: ChartListItem[] = [];
let initialError: string | null = null;
---

<Layout title="Synastry Chart Calculation">
  <main class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold mb-6 text-center">Synastry Comparison</h1>

    <div class="max-w-2xl mx-auto p-6 bg-white rounded shadow-md">
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
        <div>
          <label for="chart1-select" class="block text-gray-700 text-sm font-bold mb-2">Select Chart 1:</label>
          <select id="chart1-select" name="chart1" class="shadow border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" disabled>
            <option value="">Loading charts...</option>
            {/* Options populated client-side */}
          </select>
        </div>
        <div>
          <label for="chart2-select" class="block text-gray-700 text-sm font-bold mb-2">Select Chart 2:</label>
          <select id="chart2-select" name="chart2" class="shadow border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" disabled>
            <option value="">Loading charts...</option>
             {/* Options populated client-side */}
          </select>
        </div>
      </div>

      <div class="text-center mb-6">
        <button id="calculate-synastry" class="bg-teal-500 hover:bg-teal-700 text-white font-bold py-2 px-4 rounded disabled:opacity-50" disabled>
          Calculate Synastry
        </button>
      </div>

      <div id="synastry-results-container" class="mt-6 border-t pt-6 hidden">
        <h2 class="text-xl font-semibold mb-4">Synastry Results</h2>
        <p id="results-info" class="text-sm text-gray-600 mb-2"></p>
        <div id="results-error" class="mb-4 p-3 bg-red-100 text-red-700 rounded hidden"></div>
        <div id="results-aspects">
          {/* Aspects list or visualization here */}
          <p class="text-gray-500">(Aspect list placeholder)</p>
        </div>
        {/* TODO: Add Bi-wheel visualization placeholder/component */}
      </div>
      
      <p id="initial-loading-error" class="text-red-500 text-center hidden"></p>

    </div>
  </main>

  <script define:vars={{ apiClientPath: '../../lib/apiClient' }}>
    let chartListCache = []; // Cache fetched chart list

    async function populateChartSelects() {
      const select1 = document.getElementById('chart1-select');
      const select2 = document.getElementById('chart2-select');
      const calcButton = document.getElementById('calculate-synastry');
      const errorP = document.getElementById('initial-loading-error');
      
      if (!select1 || !select2 || !calcButton || !errorP) return;

      try {
        errorP.classList.add('hidden');
        const { apiClient } = await import(apiClientPath);
        chartListCache = await apiClient.get('/charts');

        select1.innerHTML = '<option value="">Select Chart 1</option>'; // Clear loading
        select2.innerHTML = '<option value="">Select Chart 2</option>';

        if (chartListCache.length === 0) {
            select1.innerHTML = '<option value="">No saved charts found</option>';
            select2.innerHTML = '<option value="">No saved charts found</option>';
            return;
        }

        chartListCache.forEach(chart => {
          const option1 = document.createElement('option');
          option1.value = chart.id;
          option1.textContent = `${chart.name} (${new Date(chart.birth_datetime).toLocaleDateString()})`;
          select1.appendChild(option1);

          const option2 = document.createElement('option');
          option2.value = chart.id;
          option2.textContent = `${chart.name} (${new Date(chart.birth_datetime).toLocaleDateString()})`;
          select2.appendChild(option2);
        });

        select1.disabled = false;
        select2.disabled = false;
        
        // Enable button only when two different charts are selected
        const checkSelection = () => {
            calcButton.disabled = !(select1.value && select2.value && select1.value !== select2.value);
        };
        select1.onchange = checkSelection;
        select2.onchange = checkSelection;

      } catch (error) {
        console.error('Failed to load chart list:', error);
        errorP.textContent = `Error loading chart list: ${error.message}`;
        errorP.classList.remove('hidden');
        select1.innerHTML = '<option value="">Error loading charts</option>';
        select2.innerHTML = '<option value="">Error loading charts</option>';
      }
    }

    async function handleSynastryCalculation() {
        const select1 = document.getElementById('chart1-select');
        const select2 = document.getElementById('chart2-select');
        const calcButton = document.getElementById('calculate-synastry');
        const resultsContainer = document.getElementById('synastry-results-container');
        const resultsInfo = document.getElementById('results-info');
        const resultsError = document.getElementById('results-error');
        const resultsAspects = document.getElementById('results-aspects');

        if (!select1 || !select2 || !calcButton || !resultsContainer || !resultsInfo || !resultsError || !resultsAspects) return;

        const chart1Id = select1.value;
        const chart2Id = select2.value;

        if (!chart1Id || !chart2Id || chart1Id === chart2Id) {
            resultsError.textContent = 'Please select two different charts.';
            resultsError.classList.remove('hidden');
            return;
        }

        calcButton.disabled = true;
        calcButton.textContent = 'Calculating...';
        resultsContainer.classList.remove('hidden');
        resultsError.classList.add('hidden');
        resultsAspects.innerHTML = '<p class="text-gray-500">Loading aspects...</p>';

        try {
            const { apiClient } = await import(apiClientPath);
            const inputData = { chart1_id: chart1Id, chart2_id: chart2Id };
            const result = await apiClient.post('/charts/synastry', inputData);

            resultsInfo.textContent = `Comparison between ${result.chart1_name} and ${result.chart2_name}`;

            if (result.calculation_error) {
                throw new Error(result.calculation_error);
            }

            if (result.aspects && result.aspects.length > 0) {
                const aspectList = document.createElement('ul');
                aspectList.className = 'space-y-1 list-disc list-inside text-sm';
                result.aspects.forEach(aspect => {
                    const li = document.createElement('li');
                    li.textContent = `${aspect.planet1} ${aspect.aspect_name} ${aspect.planet2} (Orb: ${aspect.orb.toFixed(1)}Â°)`
                    // Add styling based on aspect type maybe?
                    aspectList.appendChild(li);
                });
                 resultsAspects.innerHTML = ''; // Clear loading message
                 resultsAspects.appendChild(aspectList);
            } else {
                resultsAspects.innerHTML = '<p class="text-gray-500">No significant synastry aspects found.</p>';
            }

        } catch (error) {
             console.error('Synastry calculation failed:', error);
             resultsError.textContent = `Error calculating synastry: ${error.message}`;
             resultsError.classList.remove('hidden');
             resultsAspects.innerHTML = ''; // Clear loading/previous results
        } finally {
             calcButton.disabled = false;
             calcButton.textContent = 'Calculate Synastry';
        }
    }

    // Initialize
    document.addEventListener('DOMContentLoaded', () => {
        populateChartSelects();
        const calcButton = document.getElementById('calculate-synastry');
        if(calcButton) {
            calcButton.onclick = handleSynastryCalculation;
        }
    });
  </script>
</Layout> 