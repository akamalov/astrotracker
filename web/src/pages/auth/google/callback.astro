---
import Layout from "../../../layouts/Layout.astro"; // Adjust path
import { useAuthStore } from '../../../stores/authStore'; // Will be needed later
import apiClient from '../../../lib/apiClient'; // Will be needed later

// This page handles the redirect from Google OAuth
// It needs to:
// 1. Potentially capture an authorization code from URL query params.
// 2. Exchange this code with the backend for an access token.
// 3. Get user info.
// 4. Update the authStore (login the user).
// 5. Redirect to the dashboard or another appropriate page.

let message = "Processing Google OAuth callback...";
let authCode = Astro.url.searchParams.get('code');
let error = Astro.url.searchParams.get('error');
let scriptToRun: string | null = null;

console.log("Google OAuth Callback URL:", Astro.url.toString());
console.log("Auth Code:", authCode);
console.log("Error (if any):", error);

if (error) {
  message = `OAuth Error: ${error}. Please try logging in again.`;
  // Consider redirecting to /login with an error message
} else if (authCode) {
  // This block will run on the server during SSR.
  // We prepare a message and a script to be run on the client.
  message = "Attempting to finalize Google login..."; 
  // The actual API calls will be made by a client-side script
  // because Astro components' frontmatter runs on the server and cannot directly
  // update client-side stores or perform client-side navigation based on API calls.
  // We will pass the authCode to the client-side script.

} else {
  message = "Invalid OAuth callback state. No authorization code or error received.";
}

// For now, redirect to login after a delay or show message
// This server-side redirect is generally not what we want if we need to process client-side
// if (!error && !authCode) { 
//     Astro.response.headers.set('Location', '/login?oauth_callback_issue=true');
//     Astro.response.status = 302;
// }
---

<Layout title="Google OAuth Callback - AstroTracker">
  <div class="container mx-auto mt-8 text-center">
    <h1 class="text-2xl font-bold mb-4">Google Authentication Callback</h1>
    <p id="callback-message" class="mb-2">{message}</p>
    <p class="text-sm text-gray-600">
      If you are not redirected automatically, please <a href="/dashboard" class="text-indigo-600 hover:text-indigo-500">go to your dashboard</a> or <a href="/login" class="text-indigo-600 hover:text-indigo-500">try logging in again</a>.
    </p>
    {authCode && <p class="mt-4 text-xs text-gray-500">Auth Code Received (client will process): {authCode}</p>}
  </div>
</Layout>

{authCode && !error && (
  <script define:vars={{ authCodeFromSsr: authCode }}>
    // This script runs on the client side
    const authCode = authCodeFromSsr;
    const messageElement = document.getElementById('callback-message');

    async function processGoogleLogin() {
      if (!authCode) {
        if (messageElement) messageElement.textContent = "No authorization code found to process.";
        return;
      }

      if (messageElement) messageElement.textContent = "Exchanging authorization code for token...";
      
      const { login } = useAuthStore.getState();

      try {
        // Step 1: Exchange authorization code for an access token
        // Assuming your backend endpoint /auth/google/callback expects a POST request
        // with the code in the body and returns { access_token: "...", ... }
        // Adjust the endpoint and payload as per your FastAPI Users Google OAuth setup.
        const tokenResponse = await apiClient.post('/auth/google/callback', { code: authCode });
        const accessToken = tokenResponse.data.access_token;

        if (!accessToken) {
          throw new Error("Access token not received from backend.");
        }

        if (messageElement) messageElement.textContent = "Token received. Fetching user details...";

        // Step 2: Fetch user details using the access token
        const userResponse = await apiClient.get('/users/me', {
          headers: { Authorization: `Bearer ${accessToken}` },
        });
        const userData = userResponse.data;

        if (messageElement) messageElement.textContent = "User details received. Logging in...";

        // Step 3: Update the authStore and log the user in
        login(userData, accessToken);

        if (messageElement) messageElement.textContent = "Login successful! Redirecting to dashboard...";
        
        // Step 4: Redirect to the dashboard
        window.location.href = '/dashboard';

      } catch (e) {
        console.error("Error during Google OAuth token exchange or user fetch:", e);
        let displayError = "Failed to complete Google login. Please try again.";
        if (e.response && e.response.data && e.response.data.detail) {
          displayError = e.response.data.detail;
        } else if (e.message) {
          displayError = e.message;
        }
        if (messageElement) messageElement.textContent = displayError;
      }
    }

    // Automatically run the process
    processGoogleLogin();
  </script>
)} 