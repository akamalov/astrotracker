import Layout from '../../../layouts/Layout.astro';
import NatalChartDisplay from '../../../components/charts/NatalChartDisplay';
import { apiClient } from '../../../lib/apiClient';
import type { ChartRead, ChartCalculationResult } from '../../../types/chartTypes';

// Get the chart ID from the URL parameters
const { id } = Astro.params;

let chartData: ChartRead | null = null;
let calculatedChart: ChartCalculationResult | null = null;
let fetchError: string | null = null;
let calculationError: string | null = null;
let isLoading = true;

// --- Server-Side Data Fetching --- 
// PROBLEM: Like dashboard, this needs client-side auth token for apiClient.
// We will need to fetch data client-side.
/*
try {
  // Fetch saved chart details (birth data, name etc.)
  chartData = await apiClient.get<ChartRead>(`/charts/${id}`);

  // Fetch the calculated chart data for display
  // OPTION 1: Calculate on demand (if endpoint exists and is preferred)
  // calculatedChart = await apiClient.post<ChartCalculationResult>('/charts/natal/calculate', {
  //   birth_datetime: chartData.birth_datetime,
  //   latitude: chartData.latitude,
  //   longitude: chartData.longitude,
  //   name: chartData.name,
  //   location_name: chartData.location_name,
  // });
  // OPTION 2: Assume an endpoint exists to get pre-calculated data for a saved chart
  // calculatedChart = await apiClient.get<ChartCalculationResult>(`/charts/${id}/calculated`); // Hypothetical endpoint

  // For now, let's stick to recalculating on demand using /natal/calculate
  // Handle potential errors during calculation fetch
  if (chartData) {
    try {
      calculatedChart = await apiClient.post<ChartCalculationResult>('/charts/natal/calculate', {
        birth_datetime: chartData.birth_datetime,
        latitude: chartData.latitude,
        longitude: chartData.longitude,
        name: chartData.name,
        location_name: chartData.location_name,
      });
      if (calculatedChart?.calculation_error) {
        calculationError = calculatedChart.calculation_error;
      }
    } catch (calcError) {
      console.error(`Calculation error for chart ${id}:`, calcError);
      calculationError = calcError.message || "Failed to calculate chart data for display.";
    }
  }

} catch (error) {
  console.error(`Failed to fetch chart ${id}:`, error);
  fetchError = error.message || `Could not load chart with ID ${id}.`;
  if (error.response?.status === 404) {
      fetchError = "Chart not found.";
  }
} finally {
  isLoading = false;
}
*/

<Layout title={chartData?.name || "View Chart"}>
  <main class="container mx-auto px-4 py-8">
    
    <div class="mb-4">
      <a href="/dashboard" class="text-blue-600 hover:underline">&larr; Back to Dashboard</a>
    </div>

    {/* Client-side wrapper to handle fetching and rendering */}
    <div id="chart-detail-wrapper" data-chart-id={id}>
      {/* Initial Loading State */}
      <div id="loading-placeholder" class="text-center py-10">
        <p>Loading chart data...</p>
      </div>

      {/* Error State */}
      <div id="error-placeholder" class="text-center py-10 text-red-600 bg-red-50 rounded p-4 hidden">
        {/* Error message will be inserted here */}
      </div>

      {/* Content placeholder - will be populated by script */}
      <div id="chart-content" class="hidden">
        <h1 id="chart-name" class="text-3xl font-bold mb-2 text-center"></h1>
        <p id="chart-details" class="text-sm text-gray-600 mb-6 text-center"></p>
        <div id="chart-display-container" class="mb-8">
          {/* NatalChartDisplay will be rendered here via React portal or similar */}
        </div>

        {/* --- Transit Controls Section --- */}
        <div id="transit-controls" class="mt-8 border-t pt-6">
           <h2 class="text-xl font-semibold mb-4 text-center">View Transits</h2>
           <div class="flex flex-col sm:flex-row justify-center items-center gap-4">
              <label for="transit-datetime-picker" class="font-medium">Select Transit Date & Time:</label>
               {/* DatePicker will be mounted here by React */}
               <div id="datepicker-container" class="relative z-10"></div> 
               <button id="update-transit-button" class="bg-purple-500 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded disabled:opacity-50" disabled>
                   Show Transits
               </button>
           </div>
           {/* Area to display transit calculation results or errors */}
           <div id="transit-display-area" class="mt-6">
               <p class="text-center text-gray-500">(Select a date and click 'Show Transits')</p>
           </div>
       </div>
       {/* --- End Transit Controls Section --- */}

      </div>
    </div>

  </main>

  {/* Client-side script for fetching and rendering */}
  <script define:vars={{ apiClientPath: '../../../lib/apiClient' }}>
    import React, { useState, StrictMode } from 'react'; // Import useState
    import ReactDOM from 'react-dom/client'; // Use createRoot
    import NatalChartDisplay from '../../../components/charts/NatalChartDisplay';
    import DatePicker from "react-datepicker"; // Import DatePicker
    import "react-datepicker/dist/react-datepicker.css"; // Import styles

    // --- Global state for the script ---
    let selectedTransitDate = new Date(); // Default to now
    let currentChartId = null;
    let apiClientInstance = null;
    let currentCalculatedNatalChart = null; 
    // --- End Global state ---

    // --- React Component for Date Picker --- 
    const TransitDatePicker = ({ initialDate, onChange }) => {
        const [startDate, setStartDate] = useState(initialDate);
        
        const handleChange = (date) => {
            setStartDate(date);
            onChange(date); // Notify parent script of change
        };

        return React.createElement(DatePicker, {
            selected: startDate,
            onChange: handleChange,
            showTimeSelect: true,
            dateFormat: "Pp", // Format with date and time
            className: "shadow border rounded py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline w-full",
            popperPlacement: "bottom-start", // Adjust as needed
        });
    };
    // --- End React Component --- 

    // --- Function to fetch and display Transits ---
    async function fetchAndDisplayTransits() {
        const updateButton = document.getElementById('update-transit-button');
        const transitDisplayArea = document.getElementById('transit-display-area');
        const displayContainer = document.getElementById('chart-display-container');
        
        if (!currentChartId || !apiClientInstance || !updateButton || !transitDisplayArea || !displayContainer) {
            console.error('Missing elements or context for transit fetch');
            transitDisplayArea.innerHTML = `<p class="text-red-500">Internal error: Cannot fetch transits.</p>`;
            return;
        }

        console.log(`Fetching transits for ${selectedTransitDate.toISOString()}`);
        updateButton.disabled = true;
        updateButton.textContent = 'Loading Transits...';
        transitDisplayArea.innerHTML = '<p class="text-center text-gray-500">Loading transits...</p>';
        
        let fetchedTransitData = null;
        try {
            // Fetch transit data using the selected date
            fetchedTransitData = await apiClientInstance.get(
                `/charts/${currentChartId}/transits?transit_datetime=${selectedTransitDate.toISOString()}`
            );
            console.log('Transit data received:', fetchedTransitData);
            
            // Clear the transit display area (we'll update the main chart)
            transitDisplayArea.innerHTML = ''; 
            transitDisplayArea.classList.add('hidden');

            // --- Re-render NatalChartDisplay with transit data --- 
            const displayRoot = displayContainer._reactRootContainer;
            if (displayRoot) {
                 console.log("Updating NatalChartDisplay with transit data...");
                 if (currentCalculatedNatalChart) {
                     displayRoot.render(
                         React.createElement(StrictMode, null, 
                             React.createElement(NatalChartDisplay, { 
                                 chartData: currentCalculatedNatalChart,
                                 transitData: fetchedTransitData
                             })
                         )
                     );
                     transitDisplayArea.innerHTML = `<p class="text-sm text-green-600 text-center">Transits for ${selectedTransitDate.toLocaleTimeString()} ${selectedTransitDate.toLocaleDateString()} loaded.</p>`;
                     transitDisplayArea.classList.remove('hidden');
                 } else {
                    console.error("Cannot update chart: Natal chart data not found.");
                    transitDisplayArea.innerHTML = `<p class="text-red-500">Internal error: Could not find base chart data to update.</p>`;
                    transitDisplayArea.classList.remove('hidden');
                 }
            } else {
                 console.error('Could not find React root for NatalChartDisplay to update.');
                 transitDisplayArea.innerHTML = `
                    <h3 class="text-lg font-semibold mb-2">Transit Data (Raw - Update Failed)</h3>
                    <pre class="text-xs bg-white p-2 rounded overflow-auto border">${JSON.stringify(fetchedTransitData, null, 2)}</pre>
                 `;
                 transitDisplayArea.classList.remove('hidden');
            }
            // --- End Re-render --- 

        } catch (error) {
            console.error('Failed to fetch transits:', error);
            transitDisplayArea.innerHTML = `<p class="text-center text-red-500">Error loading transits: ${error.message || 'Unknown error'}</p>`;
            transitDisplayArea.classList.remove('hidden');
        } finally {
            updateButton.disabled = false;
            updateButton.textContent = 'Show Transits';
        }
    }
    // --- End Transit Fetch Function ---

    // --- Main Function to Load Page Details ---
    async function loadPage() {
      // Get DOM elements
      const wrapper = document.getElementById('chart-detail-wrapper');
      currentChartId = wrapper?.dataset.chartId;
      const loadingPlaceholder = document.getElementById('loading-placeholder');
      const errorPlaceholder = document.getElementById('error-placeholder');
      const chartContent = document.getElementById('chart-content');
      const chartNameEl = document.getElementById('chart-name');
      const chartDetailsEl = document.getElementById('chart-details');
      const displayContainer = document.getElementById('chart-display-container');
      const datePickerContainer = document.getElementById('datepicker-container');
      const updateTransitButton = document.getElementById('update-transit-button');

      // Check if elements exist
      if (!currentChartId || !loadingPlaceholder || !errorPlaceholder || !chartContent || !chartNameEl || !chartDetailsEl || !displayContainer || !datePickerContainer || !updateTransitButton) {
        console.error('Required elements not found for chart detail page.');
        if (errorPlaceholder && loadingPlaceholder) {
          errorPlaceholder.textContent = 'Page structure error. Cannot load chart.';
          errorPlaceholder.classList.remove('hidden');
          loadingPlaceholder.classList.add('hidden');
        }
        return;
      }

      // Initial UI state
      loadingPlaceholder.classList.remove('hidden');
      errorPlaceholder.classList.add('hidden');
      chartContent.classList.add('hidden');

      try {
        // Import API client
        const { apiClient } = await import(apiClientPath);
        apiClientInstance = apiClient;

        // 1. Fetch saved chart details (name, birth data etc.)
        const savedChartData = await apiClientInstance.get(`/charts/${currentChartId}`);
        console.log('Fetched saved chart data:', savedChartData);

        // 2. Fetch calculated chart data using saved details
        let calculationErrorMessage = null;
        try {
          currentCalculatedNatalChart = await apiClientInstance.post('/charts/natal/calculate', {
            birth_datetime: savedChartData.birth_datetime,
            latitude: savedChartData.latitude,
            longitude: savedChartData.longitude,
            name: savedChartData.name, 
            location_name: savedChartData.location_name,
          });
          console.log('Calculated chart data:', currentCalculatedNatalChart);
          if (currentCalculatedNatalChart.calculation_error) {
             calculationErrorMessage = currentCalculatedNatalChart.calculation_error;
             currentCalculatedNatalChart = null;
          }
        } catch (calcError) {
          console.error('Calculation failed:', calcError);
          calculationErrorMessage = calcError.message || 'Failed to calculate chart for display.';
          currentCalculatedNatalChart = null;
        }

        // Update UI with basic details
        chartNameEl.textContent = savedChartData.name || 'Unnamed Chart';
        const birthDate = new Date(savedChartData.birth_datetime);
        chartDetailsEl.textContent = `Born: ${birthDate.toLocaleString()} at ${savedChartData.location_name || 'Unknown Location'} (Lat: ${savedChartData.latitude.toFixed(4)}, Lon: ${savedChartData.longitude.toFixed(4)})`;

        // Display chart or calculation error
        if (currentCalculatedNatalChart && !calculationErrorMessage) {
          // Use React to render the NatalChartDisplay component
          const displayRoot = ReactDOM.createRoot(displayContainer);
          displayContainer._reactRootContainer = displayRoot;
          displayRoot.render(
            React.createElement(StrictMode, null, 
                React.createElement(NatalChartDisplay, { 
                    chartData: currentCalculatedNatalChart,
                    transitData: null
                })
            )
          );
        } else {
          // Display calculation error
          displayContainer.innerHTML = `<p class="text-center text-orange-600 bg-orange-50 p-3 rounded">Could not display chart: ${calculationErrorMessage}</p>`;
        }

        // --- Initialize Transit Controls ---
        const datePickerRoot = ReactDOM.createRoot(datePickerContainer);
        datePickerRoot.render(
            React.createElement(StrictMode, null, 
                React.createElement(TransitDatePicker, { 
                    initialDate: selectedTransitDate, 
                    onChange: (newDate) => {
                        selectedTransitDate = newDate;
                        updateTransitButton.disabled = false;
                    }
                })
            )
        );
        updateTransitButton.addEventListener('click', fetchAndDisplayTransits);
        // --- End Transit Controls Init ---

        // Show content
        chartContent.classList.remove('hidden');

      } catch (error) {
        console.error('Failed to load chart detail:', error);
        let message = `Error loading chart: ${error.message}`;
        if (error?.response?.status === 404) {
            message = "Chart not found.";
        }
        errorPlaceholder.textContent = message;
        errorPlaceholder.classList.remove('hidden');
      } finally {
        loadingPlaceholder.classList.add('hidden');
      }
    }
    // --- End Main Load Function ---

    // Load chart details when the script runs
    loadPage();

  </script>

</Layout> 